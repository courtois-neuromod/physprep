# -*- coding: utf-8 -*-
# !/usr/bin/env python -W ignore::DeprecationWarning
"""
Physiological data conversion to BIDS.
"""

import gc
import glob
import logging
import os

from phys2bids.phys2bids import phys2bids

from physprep import utils


def convert(root, save, sub, ses=None, info=None, ch_names=None, overwrite=False, pad=0):
    """
    Phys2Bids conversion for one subject data.

    Parameters
    ----------
    root : str
        Root directory containing the `./utils/get_info.py` output.
        Example: "/home/user/dataset/info".
    save : str
        Directory to save the converted data.
        Example: "/home/user/dataset/converted/".
    subject : str
        Name of path for a specific subject. Example: "sub-01".
    ses : list
        Name of path for specific session(s). Example: "ses-01" or
        ["ses-001", "ses-002"].
        Default to None.
    info : dict
        Output of `get_info` function.
    ch_name : list
        Name of the channels in the acqknowledge file. If not specified, the
        function will find the value in the json file generated by
        `./utils/get_info.py`.
        Default to None.

    See also
    --------
    https://phys2bids.readthedocs.io/en/latest/index.html
    """
    logger = logging.getLogger(__name__)
    # fetch info
    logger.info(f"Reading fetcher in:\n{os.path.join(root, sub)}")
    if info is None:
        fetcher = f"{sub}_sessions.json"
        info = utils.load_json(os.path.join(root, sub, fetcher))
    # define sessions
    if ses is None:
        ses = sorted(list(info.keys()))
        # Remove the sessions that are already processed
        if overwrite is False:
            existing = [str(d[-8:-1]) for d in glob.glob(f"{root}{sub}/*/")]
            setA = set(ses)
            # Get new set with elements that are only in sessions but not in
            # existing
            ses = sorted(list(setA.difference(existing)))

    elif isinstance(ses, list) is False:
        ses = [ses]

    # iterate through info
    for col in sorted(ses):
        if "harrypotter" in root:
            ses_id = "001"
            indir = os.path.join(root, sub)
        else:
            ses_id = col[-3:]
            indir = os.path.join(root, sub, col)
        # skip empty sessions
        if info[col] is None:
            logger.info(f"Empty session : {col}")
            continue
            # Define ch_name and trigger idx
        if info[col]["ch_names"] is None and ch_names is not None:
            logger.info(
                "Warning: your info file does not have channel names, "
                "the values that will be use are the following:\n "
                "Please make sure, those values are the right "
                f"ones :\n{ch_names}"
            )
            info[col]["ch_names"] = ch_names
            chtrig = 4
        elif (
            info[col]["ch_names"] is None
            and ch_names is None
            or isinstance(info[col]["recorded_triggers"], str)
        ):
            logger.info(
                "No channel names provided nor found; "
                "can't find the trigger to segment"
            )
            continue
        else:
            chtrig = info[col]["ch_names"].index("TTL") + 1

        # Iterate through files in each session and run phys2bids
        filename = info[col]["in_file"]
        logger.info(f"Converting : {col}")
        if isinstance(filename, list):
            filename.sort()
            for i in range(len(filename)):
                phys2bids(
                    filename[i],
                    info=False,
                    indir=indir,
                    outdir=os.path.join(save, sub, col),
                    heur_file=None,
                    sub=sub[-2:],
                    ses=ses_id,
                    chtrig=chtrig,
                    chsel=info[col]["chsel"],
                    num_timepoints_expected=info[col]["recorded_triggers"][f"run-0{i+1}"],
                    tr=info[col]["tr"],
                    thr=4,
                    pad=pad,
                    ch_name=info[col]["ch_names"],
                    yml="",
                    debug=True,
                    quiet=False,
                )
        else:
            try:
                phys2bids(
                    filename,
                    info=False,
                    indir=os.path.join(root, "physio", sub, col),
                    outdir=os.path.join(save, sub, col),
                    heur_file=None,
                    sub=sub[-2:],
                    ses=ses_id[-3:],
                    chtrig=chtrig,
                    chsel=info[col]["chsel"],
                    num_timepoints_expected=info[col]["recorded_triggers"]["run-01"],
                    tr=info[col]["tr"],
                    thr=4,
                    pad=pad,
                    ch_name=info[col]["ch_names"],
                    yml="",
                    debug=False,
                    quiet=False,
                )
            except AttributeError:
                filename.sort()
                for i in range(len(filename)):
                    print(i)
                    phys2bids(
                        filename[i],
                        info=False,
                        indir=os.path.join(root, sub, col),
                        outdir=os.path.join(save, sub, col),
                        heur_file=None,
                        sub=sub[-2:],
                        ses=ses_id[-3:],
                        chtrig=chtrig,
                        chsel=info[col]["chsel"],
                        num_timepoints_expected=info[col]["recorded_triggers"][
                            f"run-0{i+1}"
                        ],
                        tr=info[col]["tr"],
                        thr=4,
                        pad=pad,
                        ch_name=info[col]["ch_names"],
                        yml="",
                        debug=False,
                        quiet=False,
                    )

            except TypeError:
                print(f"No input file for {col}")
                continue
        gc.collect()
        print("~" * 30)
