# -*- coding: utf-8 -*-
# !/usr/bin/env python -W ignore::DeprecationWarning
"""Physiological data conversion to BIDS"""

import gc
import os
import json
import click
import logging
import pandas as pd
from phys2bids.phys2bids import phys2bids
import glob

import sys

sys.path.append("../utils")


@click.command()
@click.argument("root", type=click.Path())
@click.argument("save", type=click.Path())
@click.argument("sub", type=str)
@click.option("--ses", type=str, default=None, required=False)
@click.option("--tr", type=float, default=None, required=False)
@click.option("--ch_name", default=None, required=False)
@click.option("--overwrite", type=bool, default=False, required=False)
@click.option("--pad", type=int, default=0, required=False)
def call_convert(root, save, sub, ses=None, tr=None, ch_name=None, overwrite=False, pad=0):
    """
    Call `convert` function only if `convert.py` is called as CLI

    For parameters description, please refer to the documentation of the `convert` function
    """
    if ch_name is not None:
        ch_name = json.loads(ch_name)
    convert(root, save, sub, ses, tr, ch_name, overwrite, pad)


def convert(root, save, sub, ses=None, tr=None, ch_names=None, overwrite=False, pad=0):
    """
    Phys2Bids conversion for one subject data

    Parameters
    ----------
    root : str
        Root directory containing the `./utils/get_info.py` output. Example: "/home/user/dataset/info".
    save : str
        Directory to save the converted data. Example: "/home/user/dataset/converted/".
    subject : str
        Name of path for a specific subject. Example: "sub-01".
    sessions : list
        Name of path for specific session(s). Example: "ses-01" or ["ses-001", "ses-002"].
        Default to None.
    tr : float
        TR value used for the mri acquisition. If not specified, the function
        will find the value in the json file generated by `./utils/get_info.py`.
        Default to None.
    ch_name : list
        Name of the channels in the acqknowledge file. If not specified, the function
        will find the value in the json file generated by `./utils/get_info.py`.
        Default to None.

    See also
    --------
    https://phys2bids.readthedocs.io/en/latest/index.html

    Examples
    --------
    In script
    >>> convert(root="/home/user/dataset/info", save="/home/user/dataset/converted/", sub="sub-01", ses="ses-001", tr=1.49, ch_name=["EDA", "ECG", "TTL"])
    In terminal
    >>> python convert.py /home/user/dataset/info /home/user/dataset/converted/ sub-01 --ses ses-001 --tr 1.49 --ch_name '["EDA", "ECG", "TTL"]'
    NOTE: if you want to specify the `ch_name` using the CLI, specify your list inside single quote ('') just like the example above.
    """
    logger = logging.getLogger(__name__)
    # fetch info
    fetcher = f"{sub}_volumes_all-ses-runs.json"
    logger.info(f"Reading fetcher:\n{os.path.join(save, sub, fetcher)}")
    info = pd.read_json(os.path.join(save, sub, f"{sub}_volumes_all-ses-runs.json"))
    # define sessions
    if ses is None:
        ses = sorted(list(info.columns))
        # Remove the sessions that are already processed
        if overwrite is False:
            existing = [str(d[-8:-1]) for d in glob.glob(f"{save}{sub}/*/")]
            setA = set(ses)
            # Get new set with elements that are only in sessions but not in existing
            ses = sorted(list(setA.difference(existing)))

    elif isinstance(ses, list) is False:
        ses = [ses]
    
    # iterate through info
    for col in sorted(ses):
        if "harrypotter" in root:
            ses_id = "001"
            indir = os.path.join(root, sub)
        else:
            ses_id = col[-3:]
            indir = os.path.join(root, sub, col)
        # skip empty sessions
        if info[col] is None:
            logger.info(f"Empty session : {col}")
            continue
            # Define ch_name and trigger idx
        if info[col]["ch_names"] is None and ch_names is not None:
            logger.info(
                "Warning: your info file does not have channel names, the values that will be use are the following:\n"
                f"Please make sure, those values are the right ones :\n{ch_names}"
            )
            info[col]["ch_names"] = ch_names
            chtrig = 4
        elif info[col]["ch_names"] is None and ch_names is None or isinstance(info[col]['recorded_triggers'], str):
            logger.info("No channel names provided nor found; can't find the trigger to segment")
            continue
        else:
            # Define chtrig ; should find a way to find it from a list of possible values
            ch_list = ['EDA' if 'EDA' in ch else 'ECG' if 'ECG' in ch else 'PPG' if 'PPG' in ch else 'TTL' if 'A 5' in ch or 'TTL' in ch else 'RSP' for ch in info[col]['ch_names']]
            chtrig = ch_list.index('TTL') + 1
            info[col].update({"ch_names": ch_list})

        # Iterate through files in each session and run phys2bids
        filename = info[col]["in_file"]
        logger.info(f"Converting : {col}")
        if isinstance(filename, list):
            filename.sort()
            for i in range(len(filename)):
                phys2bids(
                    filename[i],
                    info=False,
                    indir=indir,
                    outdir=os.path.join(save, sub, col),
                    heur_file=None,
                    sub=sub[-2:],
                    ses=ses_id,
                    chtrig=chtrig,
                    chsel=None,
                    num_timepoints_expected=info[col]["recorded_triggers"][
                        f"run-0{i+1}"
                    ],
                    tr=info[col]["tr"],
                    thr=4,
                    pad=pad,
                    ch_name=info[col]["ch_names"],
                    yml="",
                    debug=True,
                    quiet=False,
                )
        else:
            try:
                phys2bids(
                    filename,
                    info=False,
                    indir=os.path.join(root, "physio", sub, col),
                    outdir=os.path.join(save, sub, col),
                    heur_file=None,
                    sub=sub[-2:],
                    ses=ses_id[-3:],
                    chtrig=chtrig,
                    chsel=None,
                    num_timepoints_expected=info[col]["recorded_triggers"]["run-01"],
                    tr=info[col]["tr"],
                    thr=4,
                    pad=pad,
                    ch_name=info[col]["ch_names"],
                    yml="",
                    debug=False,
                    quiet=False,
                )
            except AttributeError:
                filename.sort()
                for i in range(len(filename)):
                    print(i)
                    phys2bids(
                        filename[i],
                        info=False,
                        indir=os.path.join(root, sub, col),
                        outdir=os.path.join(save, sub, col),
                        heur_file=None,
                        sub=sub[-2:],
                        ses=ses_id[-3:],
                        chtrig=chtrig,
                        chsel=None,
                        num_timepoints_expected=info[col]["recorded_triggers"][
                            f"run-0{i+1}"
                        ],
                        tr=info[col]["tr"],
                        thr=4,
                        pad=pad,
                        ch_name=info[col]["ch_names"],
                        yml="",
                        debug=False,
                        quiet=False,
                    )

            except TypeError:
                print(f"No input file for {col}")
                continue
        gc.collect()
        print("~" * 30)


if __name__ == "__main__":
    log_fmt = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    logging.basicConfig(level=logging.INFO, format=log_fmt)
    call_convert()
